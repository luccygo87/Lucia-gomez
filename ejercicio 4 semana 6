using System;

public class Nodo
{
    public int Dato;
    public Nodo Siguiente;

    public Nodo(int dato)
    {
        Dato = dato;
        Siguiente = null;
    }
}

public class ListaEnlazada
{
    private Nodo cabeza;

    public void Agregar(int dato)
    {
        Nodo nuevoNodo = new Nodo(dato);
        if (cabeza == null)
        {
            cabeza = nuevoNodo;
        }
        else
        {
            Nodo temp = cabeza;
            while (temp.Siguiente != null)
            {
                temp = temp.Siguiente;
            }
            temp.Siguiente = nuevoNodo;
        }
    }

    public void EliminarFueraDeRango(int min, int max)
    {
        while (cabeza != null && (cabeza.Dato < min || cabeza.Dato > max))
        {
            cabeza = cabeza.Siguiente;
        }

        Nodo actual = cabeza;
        while (actual != null && actual.Siguiente != null)
        {
            if (actual.Siguiente.Dato < min || actual.Siguiente.Dato > max)
            {
                actual.Siguiente = actual.Siguiente.Siguiente;
            }
            else
            {
                actual = actual.Siguiente;
            }
        }
    }

    public void ImprimirLista()
    {
        Nodo temp = cabeza;
        while (temp != null)
        {
            Console.Write(temp.Dato + " ");
            temp = temp.Siguiente;
        }
        Console.WriteLine();
    }
}

public class Program
{
    public static void Main(string[] args)
    {
        ListaEnlazada lista = new ListaEnlazada();
        Random rand = new Random();

        // Generar 50 números aleatorios entre 1 y 999
        for (int i = 0; i < 50; i++)
        {
            lista.Agregar(rand.Next(1, 1000));
        }

        Console.WriteLine("Lista original:");
        lista.ImprimirLista();

        // Definir rango
        int min = 100;
        int max = 500;
        lista.EliminarFueraDeRango(min, max);

        Console.WriteLine($"Lista después de eliminar elementos fuera del rango [{min}, {max}]:");
        lista.ImprimirLista();
    }
}
